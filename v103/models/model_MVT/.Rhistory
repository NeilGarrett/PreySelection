dat_princeton[, head(rt_z, 2), by=subj]
dat_princeton[order, head(rt_z, 50), by=subj, block]
dat_princeton[order, head(rt_z, 50), by=.(subj, block)]
dat_princeton[, head(rt_z, 50), by=.(subj, block)]
dat_princeton[, mean(head(rt_z, 50)), by=.(subj, block)]
dat_princeton[, .(mean(head(rt_z, 50)), order_condition), by=.(subj, block)]
dat_princeton[, .(mean(head(rt_z, 50))), by=.(subj, block, order_condition)]
dat_princeton[, .(first_50 = mean(head(rt_z, 50)), last_50 = mean(tail(rt_z, 50))), by=.(subj, block, order_condition)]
dat_princeton[, .(first_50 = mean(head(rt_z, 50)), last_50 = mean(tail(rt_z, 50))), by=.(subj, block, order_condition)]
summary_rt = dat_princeton[, .(first_50 = mean(head(rt_z, 50)), last_50 = mean(tail(rt_z, 50))), by=.(subj, block, order_condition)]
summary_rt[, mean(first_50), by=.(block, order_condition)]
summary_rt[, .(first_50 = mean(first_50), last_50 = mean(last_50)), by=.(block, order_condition)]
#look at rt for first part and last part of the block
summary_rt = dat_princeton[, .(first_50 = mean(head(rt_z, 50)), last_50 = mean(tail(rt_z, 50))), by=.(subj, block, order_condition)]
summary_rt = summary_rt[, .(first_50 = mean(first_50), last_50 = mean(last_50)), by=.(block, order_condition)]
summary_rt
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_conditon)) + geom_bar(stat="identity")
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity")
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
#look at rt for first part and last part of the block
summary_rt = dat_princeton[, .(first_50 = mean(head(rt_z, 50)), last_50 = mean(tail(rt_z, 50))), by=.(subj, block, order_condition)]
summary_rt = summary_rt[, .(first_50 = mean(first_50), last_50 = mean(last_50)), by=.(block, order_condition)]
summary_rt$block = as.factor(summary_rt$block)
summary_rt$order_condition = as.factor(summary_rt$order_condition)
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
ggplot(data=summary_rt, aes(x=block, y=last_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
ordered(summary_rt$block, labels = c("rich", "poor"))
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
ggplot(data=summary_rt, aes(x=block, y=last_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
summary_rt$block = ordered(summary_rt$block, labels = c("rich", "poor"))
ggplot(data=summary_rt, aes(x=block, y=first_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
ggplot(data=summary_rt, aes(x=block, y=last_50, fill=order_condition)) + geom_bar(stat="identity", position = "dodge")
summary(m_2)
dat_sb2$dv_scaled = dat_sb2[, scale(dv), by=sub_no][, V1]
#model which interacts dv with pep
m_2 = glmer('approach_avoid ~ dv_scaled*pep_scaled + (1 + dv_scaled*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
summary(m_2)
summary(m_2)
m_2 = glmer('approach_avoid ~ dv_scaled*pep_scaled + (1 + dv_scaled*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
summary(m_2)
dat_sb2[, mean(dv_scaled), by=.(block)]
summary(dat_sb2)
hist(dat_sb2[block==1, dv_scaled])
hist(dat_sb2[block==-1, dv_scaled])
hist(dat_sb2[block==1, dv_scaled])
m_3 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + block*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled + block*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
m_3 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + block*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
m_3 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
summary(m3)
summary(m_3)
m_3 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
m_4
m_3
m_5
m_4
m_5 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + block*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled + block*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
m_5
summary(M_5)
summary(m_5)
m_6 = glmer('approach_avoid ~ reward*pep_scaled + opp_cost_estimate*pep_scaled + (1 + reward*pep_scaled + opp_cost_estimate*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
m_6
summary(m_6)
m_7 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + Q_estimate*pep_scaled + (1 + reward*pep_scaled + delay*pep_scaled + Q_estimate*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
summary(m_7)
dat_sb2$reward_factor = as.factor(dat_sb2$reward)
dat_sb2$delay_factor = as.factor(dat_sb2$delay)
m_8 = glmer('approach_avoid ~ reward_factor*pep_scaled + delay_factor*pep_scaled + Q_estimate*pep_scaled + (1 + reward_factor*pep_scaled + delay_factor*pep_scaled + Q_estimate*pep_scaled | sub_no)', data = dat_sb2, family = "binomial")
summary(m_8)
summary(m_5)
Summary(m_7)
summary(m_7)
summary(m8)
summary(m_8)
m_9 = glmer('approach_avoid ~ reward*pep_scaled + delay*pep_scaled + Q_estimate*pep_scaled + block + (1 + reward*pep_scaled + delay*pep_scaled + Q_estimate*pep_scaled + block| sub_no)', data = dat_sb2, family = "binomial")
summary(m_9)
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#load in Santa B data
#dat_sb1 = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/data/preysel_phys_Nov21.csv')
dat_sb2 = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models/model_subjective1beta2lr_delayreward/data_for_lme4.csv')
#laod in princeton data to compare
dat_princeton = fread('/Users/neil/GitHubRepo/Projects/PreySelection/v103/models/model_subjective1beta2lr_delayreward/data_for_lme4.csv')
hist(dat_sb2$dv)
hist(scale(dat_sb2$dv))
#have choice coded as 0 (reject) and 1 (accept)
dat_sb2$approach_avoid = dat_sb2$approach_avoid - 1
#add variable with pep scaled for each participant
dat_sb2$pep_scaled = dat_sb2[, scale(pep_raw), by=sub_no][, V1]
dat_sb2$dv_scaled = dat_sb2[, scale(dv), by=sub_no][, V1]
dat_sb2$reward_factor = as.factor(dat_sb2$reward)
dat_sb2$delay_factor = as.factor(dat_sb2$delay)
dat_sb2[, Q_estimate]
hist(dat_sb2[, Q_estimate])
hist(dat_sb2[, .(scale(Q_estimate))])
hist(dat_sb2[, Q_estimate])
View(dat_sb2)
1.780748e+01
1.780748e+01
dat[Q_estimate<5,]
dat_sb2[Q_estimate<5,]
dat_sb2[Q_estimate<5, sub]
dat_sb2[Q_estimate<5, subj]
dat_sb2[Q_estimate<5, sub_no]
dat_sb2[Q_estimate<5, .(sub_no, trial_index_per_block)]
dat_sb2[Q_estimate<5, .(sub_no, trial_index_per_block, block)]
dat_sb2[Q_estimate<2.35, .(sub_no, trial_index_per_block, block)]
length(dat_sb2[Q_estimate<2.35, .(sub_no, trial_index_per_block, block)])
#clear workspace
rm(list = ls())
#import various packages (might need to install these if not already there)
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
library(cowplot)
library(Hmisc)
#set theme for plot
theme_cowplot(font_size = 8, font_family = "", line_size = 0.5)
#set output directory to save plots to
output_path = '/Users/neil/Dropbox/Summerfield_Lab/Nima/'
#set working directory
setwd("Users/neil/Dropbox/Summerfield_Lab/Nima/")
#read in data
dat = fread('/Users/neil/Dropbox/Summerfield_Lab/Nima/allMonkey_v1_v2_history_normalised.csv')
#summary
summary(dat)
#code monkey, iti and mag variables as a factors (easier for plotting)
dat$monkey = as.factor(dat$monkey)
dat$iti = as.factor(dat$iti)
dat$mag = as.factor(dat$mag)
#calculate N of no responses for each animal at each reward magnitude level
#first compile mean reject rate for each animal for each reward level (store in summary_stat_mag)
summary_stat_mag = dat[exp==1, .(reject_percentage = sum(rewarded=="NaN")/.N), by = .(monkey, mag)]
#then average over each animal for plotting (store in summary_stat_all)
summary_stat_all = summary_stat_mag[, .(means = mean(reject_percentage), std_error = sd(reject_percentage)/sqrt(.N)), by=mag]
#compile and plot averages over all animals
p1 = ggplot(dat=summary_stat_all, aes(x=mag, y=means)) + geom_bar(stat="identity") +
geom_errorbar(aes(ymin = means - std_error, ymax = means + std_error)) +
ylab("% no response trials")
#compile and plot no response trials for each animal seperately
p2 = ggplot(dat=summary_stat_mag, aes(x=mag, y=reject_percentage, fill=monkey)) +
geom_bar(stat="identity", position ="dodge")
#now look at effects of ITI
#calculate N of no responses for each animal at each ITI level
summary_stat_ITI = dat[exp==1, .(reject_percentage = sum(rewarded=="NaN")/.N), by = .(monkey, iti)]
#then average over each animal for plotting (store in summary_stat_all_ITI)
summary_stat_all_ITI = summary_stat_ITI[, .(means = mean(reject_percentage), std_error = sd(reject_percentage)/sqrt(.N)), by=iti]
#plot over all animals
p3 = ggplot(dat=summary_stat_all_ITI, aes(x=iti, y=means)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin = means - std_error, ymax = means + std_error)) +
ylab("% no response trials")
#plot for each animal seperately
p4 = ggplot(dat=summary_stat_ITI, aes(x=iti, y=reject_percentage, fill=monkey)) +
geom_bar(stat="identity", position ="dodge")
#look at effects of reward mag and ITI in combination (exclude monkey 1)
#fist split up each cell
summary_stat_ITI_reward = dat[exp==1 & monkey !=1, .(reject_percentage = sum(rewarded=="NaN")/.N), by = .(monkey, iti, mag)]
#compile and plot no response trials
summary_stat_all_ITI_reward = summary_stat_ITI_reward[, .(means = mean(reject_percentage), std_error = sd(reject_percentage)/sqrt(.N)), by=.(iti, mag)]
p5 = ggplot(dat=summary_stat_all_ITI_reward, aes(x=iti, y=means, fill=mag)) +
geom_bar(stat="identity", position ="dodge") +
geom_errorbar(aes(ymin = means - std_error, ymax = means + std_error), position ="dodge") +
ylab("% no response trials")
## effect of reward of past trial on motivation?
#past trial did make a response but didn't get a reward:
mean(dat[exp==1 & histRew==0 & rewarded == "NaN", .N, by=monkey][,N]/dat[exp==1 & histRew==0, .N, by=monkey][, N])
#past trial made a response and got a reward
mean(dat[exp==1 & histRew>0 & rewarded == "NaN", .N, by=monkey][,N]/dat[exp==1 & histRew>0, .N, by=monkey][, N])
#past trial did not make a response (and therefore did not get a reward)
mean(dat[exp==1 & histRew=="NaN" & rewarded == "NaN", .N, by=monkey][,N]/dat[exp==1 & histRew=="NaN", .N, by=monkey][, N])
dat_extend = dat[exp==1,]
length_dat = dim(dat_extend)[1]
# add profitability variable
dat_extend$profitability = as.numeric(dat_extend$mag)/dat_extend$speed
# put in previous trial varaibles for various
dat_extend$prev_probability = NaN
dat_extend$prev_mag = NaN
dat_extend$prev_speed = NaN
dat_extend$prev_profitability = NaN
for (i in 2:length_dat){
dat_extend$prev_probability[i] = dat_extend$probability[i-1]
dat_extend$prev_mag[i] = dat_extend$mag[i-1]
dat_extend$prev_speed[i] = dat_extend$speed[i-1]
dat_extend$prev_profitability[i] = dat_extend$profitability[i-1]
}
dat_extend[trial==2]$prev_probability = NaN
dat_extend[trial==2]$prev_mag = NaN
dat_extend[trial==2]$prev_speed = NaN
dat_extend[trial==2]$prev_profitability = NaN
setkey(dat_extend, prev_profitability, monkey)
key(dat_extend)
#look at whether rt varies as a function of profitability of the offer being presented
rt_by_profitability = dat_extend[rewarded != "NaN", .(mean_rt = mean(RT), mean_n_dots = mean(numDot), mean_n_dots = mean(numDot)), by=.(profitability, monkey)]
rt_by_profitability$profitability = round(rt_by_profitability$profitability, digits=4)
rt_by_profitability$profitability = as.factor(rt_by_profitability$profitability)
setkey(rt_by_profitability, profitability)
rt_by_profitability = rt_by_profitability[, .(mean_rt = mean(mean_rt), mean_n_dots = mean(mean_n_dots), std_error_rt=sd(mean_rt)/sqrt(.N), std_error_n_dots=sd(mean_n_dots)/sqrt(.N)), by=profitability]
#see if rt varies with profitability of current option
p6 = ggplot(dat=rt_by_profitability, aes(x=profitability, y=mean_rt)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_rt - std_error_rt, ymax = mean_rt + std_error_rt))
#same for n dots
p7 = ggplot(dat=rt_by_profitability, aes(x=profitability, y=mean_n_dots)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_n_dots - std_error_n_dots, ymax = mean_n_dots + std_error_n_dots))
#see if rt varies with how rewarding the previous option was
rt_by_profitability_prev = dat_extend[rewarded != "NaN", .(mean_rt = mean(RT)), by=.(prev_profitability, monkey)]
rt_by_profitability_prev$prev_profitability = round(rt_by_profitability_prev$prev_profitability, digits=4)
rt_by_profitability_prev$prev_profitability = as.factor(rt_by_profitability_prev$prev_profitability)
setkey(rt_by_profitability_prev, prev_profitability)
rt_by_profitability_prev = rt_by_profitability_prev[, .(mean_rt = mean(mean_rt), std_error=sd(mean_rt)/sqrt(.N)), by=prev_profitability]
#see if decision to accept depends on profitability of the previous option
p8 = ggplot(dat=rt_by_profitability_prev, aes(x=prev_profitability, y=mean_rt)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = mean_rt - std_error, ymax = mean_rt + std_error))
#acceptance rates (not %reject)
dat_extend[rewarded != "NaN", .(N=.N), by=.(prev_profitability, monkey)][ ,N]/dat_extend[, .(N=.N), by=.(prev_profitability, monkey)][ ,N]
accept_by_profitability_prev = dat_extend[, .(accept_percentage = sum(rewarded != "NaN")/.N), by=.(prev_profitability, monkey)]
accept_by_profitability_prev = accept_by_profitability_prev[, .(mean = mean(accept_percentage), std_error = sd(accept_percentage)/sqrt(.N)), by=prev_profitability]
accept_by_profitability_prev = round(accept_by_profitability_prev, digits=4) #applies to all - quite useful
#code as factor for plotting
accept_by_profitability_prev$prev_profitability = as.factor(accept_by_profitability_prev$prev_profitability)
#see if decision to accept depends on profitability of the previous option
p9 = ggplot(dat=accept_by_profitability_prev, aes(x=prev_profitability, y=mean)) +
geom_bar(stat = "identity") + geom_errorbar(aes(ymin = mean - std_error, ymax = mean + std_error)) +
ggtitle('mean acceptance rates by profitability of previous option') +
ylab('% acceptance rates')
#how correlated are rt and num dots?
cor(dat_extend$numDot, dat_extend$RT, use = "complete.obs")
#plot rt by both ITI and profitability of the option
dat_p10 = dat_extend[rewarded != "NaN", .(mean_rt = mean(RT)), by=.(profitability, monkey, iti)][order(profitability), .(mean_rt = mean(mean_rt), std_error = sd(mean_rt)/sqrt(.N)), by = .(iti, profitability)]
dat_p10$profitability = round(dat_p10$profitability, digits =4)
dat_p10$mean_rt = round(dat_p10$mean_rt, digits =4)
dat_p10$profitability = as.factor(dat_p10$profitability)
p10 = ggplot(data=dat_p10, aes(x=profitability, y=mean_rt, fill=iti)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(x = profitability, ymin = mean_rt-std_error, ymax = mean_rt+std_error), position = "dodge")
#plot out effect of session on rt
dat_p11 = dat_extend[rewarded != "NaN", .(mean_rt = mean(RT)), by=.(monkey, session)][order(session), .(mean_rt = mean(mean_rt), std_error = sd(mean_rt)/sqrt(.N)), by = .(session)]
p11 = ggplot(data=dat_p11, aes(x=session, y=mean_rt)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(x = session, ymin = mean_rt-std_error, ymax = mean_rt+std_error), position = "dodge")
#plot out effect of session on acceptance rates
dat_p12 = dat_extend[, .(mean_accept = sum(rewarded != "NaN")/.N), by=.(monkey, session)][order(session), .(mean_accept = mean(mean_accept), std_error = sd(mean_accept)/sqrt(.N)), by = .(session)]
p12 = ggplot(data=dat_p12, aes(x=session, y=mean_accept)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(x = session, ymin = mean_accept-std_error, ymax = mean_accept+std_error), position = "dodge")
#m_all = glmer('RT ~ numDot*profitability + (1 + numDot*profitability | monkey)', data = dat_extend)
#m_1 = glmer('RT ~ numDot*profitability + (1 + numDot*profitability | session)', data = dat_extend[monkey==1, ])
#summary(m_1)
#m_2 = glmer('RT ~ numDot*profitability + (1 + numDot*profitability | session)', data = dat_extend[monkey==2, ])
#summary(m_2)
#m_3 = glmer('RT ~ numDot*profitability + (1 + numDot*profitability | session)', data = dat_extend[monkey==3, ])
#summary(m_3)
#m_4 = glmer('RT ~ numDot*profitability + (1 + numDot*profitability | session)', data = dat_extend[monkey==4, ])
#summary(m_4)
#plot over all animals
p13 = ggplot(dat=summary_stat_all_ITI[iti!=5000,], aes(x=iti, y=1-means)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin = 1-means - std_error, ymax = 1-means + std_error)) +
ylab("persistence levels")
p1
p2
p3
p4
p5
p6
p7
p8
p9
p10
p11
p12
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#load in Santa B data
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models//Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models/model_subjective1beta2lr_delay_1lrreward_phys_nov/data_for_lme4.csv')
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models//Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models/model_subjective1beta2lr_delay_1lrreward_phys_nov/data_for_lme4.csv')
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#load in Santa B data
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/models/model_subjective1beta2lr_delay_1lrreward_phys_nov/data_for_lme4.csv')
dat
install.packages("summarytools")
library(summarytools)
view(dfSummary(dat))
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
library(summarytools)
#load in Santa B data
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/data_for_history.csv')
view(dfSummary(dat))
m_1 = glmer('approach_avoid ~ block*tm1offer4 + (1 + block*tm1offer4 | sub_no)', data = dat_sb2, family = "binomial")
dat$block = as.factor(block)
dat$tm1offer4 = as.factor(tm1offer4)
dat$block = as.factor(dat$block)
dat$tm1offer4 = as.factor(dat$tm1offer4)
m_1 = glmer('approach_avoid ~ block*tm1offer4 + (1 + block*tm1offer4 | sub_no)', data = dat_sb2, family = "binomial")
m_1 = glmer('approach_avoid ~ tm1offer4 + (1 + tm1offer4 | sub_no)', data = dat, family = "binomial")
dat$approach_avoid = dat$approach_avoid - 1
m_1 = glmer('approach_avoid ~ tm1offer4 + (1 + tm1offer4 | sub_no)', data = dat, family = "binomial")
summary(m_1)
dat_blockA = dat[block==1,]
dat_blockB = dat[block==-1,]
view(dfSummary(dat_blockA))
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
library(summarytools)
#load in Santa B data
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/data_for_history.csv')
view(dfSummary(dat))
dat$block = as.factor(dat$block)
dat$tm1offer4 = as.factor(dat$tm1offer4)
dat$approach_avoid = dat$approach_avoid - 1
dat_blockA = dat[block==-1,]
dat_blockB = dat[block==1,]
view(dfSummary(dat_blockA))
m_1 = glmer('approach_avoid ~ tm1offer4 + (1 + tm1offer4 | sub_no)', data = dat_blockA, family = "binomial")
summary(m_1)
#clear workspace
rm(list = ls())
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
library(summarytools)
#load in Santa B data
dat = fread('/Users/neil/Dropbox/Daw_Lab/PreySelection/SantaBarbra/data_for_history.csv')
view(dfSummary(dat))
dat$block = as.factor(dat$block)
#dat$tm1offer4 = as.factor(dat$tm1offer4)
dat$approach_avoid = dat$approach_avoid - 1
dat_blockA = dat[block==-1,]
dat_blockB = dat[block==1,]
view(dfSummary(dat_blockA))
#look at basic effect of dv (should be positive)
m_1 = glmer('approach_avoid ~ tm1offer4 + (1 + tm1offer4 | sub_no)', data = dat_blockA, family = "binomial")
summary(m_1)
m_1 = glmer('approach_avoid ~ rank + tm1offer4 + (1 + rank + tm1offer4 | sub_no)', data = dat_blockA, family = "binomial")
summary(m_1)
m_1 = glmer('approach_avoid ~ rank*tm1offer4 + (1 + rank*tm1offer4 | sub_no)', data = dat_blockA, family = "binomial")
summary(m_1)
m_2 = glmer('approach_avoid ~ rank*tm1offer4 + (1 + rank*tm1offer4 | sub_no)', data = dat_blockB, family = "binomial")
summary(m_2)
summary(m_2)
summary(m_1)
summary(m_2)
m_3 = glmer('approach_avoid ~ rank*tm1offer4 + (1 + rank*tm1offer4 | sub_no)', data = dat, family = "binomial")
summary(m_3)
m_2 = glmer('approach_avoid ~ rank*tm1offer4*tm1Pep + (1 + rank*tm1offer4*tm1Pep | sub_no)', data = dat, family = "binomial")
summary(m_2)
m_3 = glmer('approach_avoid ~ rank*tm1offer4*t0Pep_delta + (1 + rank*tm1offer4*t0Pep_delta | sub_no)', data = dat, family = "binomial")
summary(m_3)
summary(m_1)
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
#library(lmerTest)
library(data.table)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
#path and filename for saving
output_models = paste("mixedmodels_", model_folder, ".txt", sep="")
dat$block = as.factor(dat$block)
dat$order_condition = as.factor(dat$order_condition)
dat$stim_rank_factor = as.factor(dat$stim_rank)
dat$profitability = as.factor(dat$profitability)
dat[, stim_rank_factor_z := scale(as.numeric(stim_rank_factor))]
dat[, stim_rank_factor_1back_z := scale(as.numeric(stim_rank_factor_1back))]
#scale this so that in same units as delays - easier for interpreation of betas
dat$change_reward = dat$change_reward/10
dat$choice_log_reg_1back = as.factor(dat$choice_log_reg_1back)
dat$stim_rank_factor_1back = as.factor(dat$stim_rank_factor_1back)
#mean(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#mean(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sink - prints subsequent output to text file
#sink(output_models)
dat$stim_rank_factor
dat$stim_rank_factor_z
unique(dat$stim_rank_factor_z)
str(dat)
unique(dat$stim_rank_factor_1back)
m1b = lmer('choice_log_reg ~ profitability + block + stim_rank_factor_1back + (1 + profitability + block + stim_rank_factor_1back | subj)', data = dat, family = binomial)
summary(m1b)
View(dat)
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
#library(lmerTest)
library(data.table)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
#path and filename for saving
output_models = paste("mixedmodels_", model_folder, ".txt", sep="")
dat$block = as.factor(dat$block)
dat$order_condition = as.factor(dat$order_condition)
dat$stim_rank_factor
dat$stim_rank_factor
stim_rank_factor_1back
dat$stim_rank_factor
dat$stim_rank_factor_1back
m1b = lmer('choice_log_reg ~ stim_rank_factor + block + stim_rank_factor_1back + (1 + stim_rank_factor + block + stim_rank_factor_1back | subj)', data = dat, family = binomial)
summary(m1b)
m1b = lmer('choice_log_reg ~ stim_rank_factor + stim_rank_factor_1back + (1 + stim_rank_factor + stim_rank_factor_1back | subj)', data = dat, family = binomial)
summary(m1b)
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
#library(lmerTest)
library(data.table)
model_folder = c("v104")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
#path and filename for saving
output_models = paste("mixedmodels_", model_folder, ".txt", sep="")
dat$block = as.factor(dat$block)
dat$order_condition = as.factor(dat$order_condition)
#dat$stim_rank_factor = as.factor(dat$stim_rank)
dat$profitability = as.factor(dat$profitability)
dat[, stim_rank_factor_z := scale(as.numeric(stim_rank_factor))]
dat[, stim_rank_factor_1back_z := scale(as.numeric(stim_rank_factor_1back))]
#scale this so that in same units as delays - easier for interpreation of betas
dat$change_reward = dat$change_reward/10
dat$choice_log_reg_1back = as.factor(dat$choice_log_reg_1back)
#dat$stim_rank_factor_1back = as.factor(dat$stim_rank_factor_1back)
#mean(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#mean(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sink - prints subsequent output to text file
#sink(output_models)
#
#m1a = lmer('choice_log_reg ~ stim_rank_factor*block + (1 + stim_rank_factor*block | subj)', data = dat, family = binomial)
#  summary(m1a)
m1b = lmer('choice_log_reg ~ stim_rank_factor + stim_rank_factor_1back + (1 + stim_rank_factor + stim_rank_factor_1back | subj)', data = dat, family = binomial)
#m1b = lmer('choice_log_reg ~ profitability + block + stim_rank_factor_1back + (1 + profitability + block + stim_rank_factor_1back | subj)', data = dat, family = binomial)
summary(m1b)
View(dat)
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
#library(lmerTest)
library(data.table)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
#path and filename for saving
output_models = paste("mixedmodels_", model_folder, ".txt", sep="")
dat$block = as.factor(dat$block)
dat$order_condition = as.factor(dat$order_condition)
#dat$stim_rank_factor = as.factor(dat$stim_rank)
dat$profitability = as.factor(dat$profitability)
dat[, stim_rank_factor_z := scale(as.numeric(stim_rank_factor))]
dat[, stim_rank_factor_1back_z := scale(as.numeric(stim_rank_factor_1back))]
#scale this so that in same units as delays - easier for interpreation of betas
dat$change_reward = dat$change_reward/10
dat$choice_log_reg_1back = as.factor(dat$choice_log_reg_1back)
#dat$stim_rank_factor_1back = as.factor(dat$stim_rank_factor_1back)
#mean(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==-1, .N, by=.(subj)][,N]/dat[block==-1, .N, by=.(subj)][,N])
#mean(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sd(dat[choice_log_reg==1 & block==1, .N, by=.(subj)][,N]/dat[block==1, .N, by=.(subj)][,N])
#sink - prints subsequent output to text file
#sink(output_models)
#
#m1a = lmer('choice_log_reg ~ stim_rank_factor*block + (1 + stim_rank_factor*block | subj)', data = dat, family = binomial)
#  summary(m1a)
m1b = lmer('choice_log_reg ~ stim_rank_factor + stim_rank_factor_1back + (1 + stim_rank_factor + stim_rank_factor_1back | subj)', data = dat, family = binomial)
#m1b = lmer('choice_log_reg ~ profitability + block + stim_rank_factor_1back + (1 + profitability + block + stim_rank_factor_1back | subj)', data = dat, family = binomial)
summary(m1b)
