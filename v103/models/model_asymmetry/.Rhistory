library(lme4)
library(lmerTest)
library(ggplot2)
#read in data
task_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_trial_by_trial.csv")
#display data
head(task_dat)
summary(task_dat)
str(task_dat)
#code this as a factor
task_dat$subject_no = as.factor(task_dat$subject_no)
#figure out subjects that generally made the same action on 95% of trials
percent_left = task_dat[choice==1, .(N_left = .N), by = subject_no]
percent_left$N_total = task_dat[choice!="NaN", .N, by = subject_no][, N]
percent_left$percent_left = percent_left$N_left/percent_left$N_total
#exclude subs where 95% of choices are the same side
include_subs = percent_left[percent_left > 0.05 & percent_left < 0.95, subject_no]
task_dat = task_dat[subject_no %in% include_subs, ]
#add variable coding whether made objectively the correct response
task_dat$correct = (task_dat$prob_shock_CS_left_commontrans>task_dat$prob_shock_CS_right_commontrans & task_dat$choice==1) | (task_dat$prob_shock_CS_left_commontrans<task_dat$prob_shock_CS_right_commontrans & task_dat$choice==2)
task_dat$correct_binary = NaN
task_dat[correct==TRUE, ]$correct_binary = 1
task_dat[correct==FALSE, ]$correct_binary = -1
#set up data table to run basic MF MB regression
#extract relevant variables from main data frame
MB_MF_dat = task_dat[, .(trial_n, subject_no, transition, shock, choice, previous_action_repeated, correct_binary, choose_right_logistic, pav_MB, pav_MF, right_reinforced, previous_pav_shock, previous_pav_congruent_MB, previous_pav_congruent_MF)]
#lagged transition variable
MB_MF_dat$transition_prev[1] = NaN
MB_MF_dat$transition_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$transition[1:nrow(MB_MF_dat)-1]
#lagged outcome variable
MB_MF_dat$shock_prev[1] = NaN
MB_MF_dat$shock_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$shock[1:nrow(MB_MF_dat)-1]
#lagged correct variable
MB_MF_dat$correct_binary_prev[1] = NaN
MB_MF_dat$correct_binary_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$correct_binary[1:nrow(MB_MF_dat)-1]
#lagged choice variable
MB_MF_dat$choice_prev[1] = NaN
MB_MF_dat$choice_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$choice[1:nrow(MB_MF_dat)-1]
#lagged right reinforced variable
MB_MF_dat$right_reinforced_prev[1] = NaN
MB_MF_dat$right_reinforced_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$right_reinforced[1:nrow(MB_MF_dat)-1]
#convert outcomes to -1(prevoiusly 0) and 1
MB_MF_dat[shock_prev==0, ]$shock_prev = -1
#MB_MF_dat[previous_pav_shock==0, ]$previous_pav_shock = -1
#MB_MF_dat$MB_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MB
#MB_MF_dat$MF_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MF
m7 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m7)
#clear screen
rm(list = ls())
#load packages (install if have not already)
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#read in data
task_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_trial_by_trial.csv")
#display data
head(task_dat)
summary(task_dat)
str(task_dat)
#code this as a factor
task_dat$subject_no = as.factor(task_dat$subject_no)
#figure out subjects that generally made the same action on 95% of trials
percent_left = task_dat[choice==1, .(N_left = .N), by = subject_no]
percent_left$N_total = task_dat[choice!="NaN", .N, by = subject_no][, N]
percent_left$percent_left = percent_left$N_left/percent_left$N_total
#exclude subs where 95% of choices are the same side
include_subs = percent_left[percent_left > 0.05 & percent_left < 0.95, subject_no]
task_dat = task_dat[subject_no %in% include_subs, ]
#add variable coding whether made objectively the correct response
task_dat$correct = (task_dat$prob_shock_CS_left_commontrans>task_dat$prob_shock_CS_right_commontrans & task_dat$choice==1) | (task_dat$prob_shock_CS_left_commontrans<task_dat$prob_shock_CS_right_commontrans & task_dat$choice==2)
task_dat$correct_binary = NaN
task_dat[correct==TRUE, ]$correct_binary = 1
task_dat[correct==FALSE, ]$correct_binary = -1
#set up data table to run basic MF MB regression
#extract relevant variables from main data frame
MB_MF_dat = task_dat[, .(trial_n, subject_no, transition, shock, choice, previous_action_repeated, correct_binary, choose_right_logistic, pav_MB, pav_MF, right_reinforced, previous_pav_shock)]
#lagged transition variable
MB_MF_dat$transition_prev[1] = NaN
MB_MF_dat$transition_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$transition[1:nrow(MB_MF_dat)-1]
#lagged outcome variable
MB_MF_dat$shock_prev[1] = NaN
MB_MF_dat$shock_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$shock[1:nrow(MB_MF_dat)-1]
#lagged correct variable
MB_MF_dat$correct_binary_prev[1] = NaN
MB_MF_dat$correct_binary_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$correct_binary[1:nrow(MB_MF_dat)-1]
#lagged choice variable
MB_MF_dat$choice_prev[1] = NaN
MB_MF_dat$choice_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$choice[1:nrow(MB_MF_dat)-1]
#lagged right reinforced variable
MB_MF_dat$right_reinforced_prev[1] = NaN
MB_MF_dat$right_reinforced_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$right_reinforced[1:nrow(MB_MF_dat)-1]
#convert outcomes to -1(prevoiusly 0) and 1
MB_MF_dat[shock_prev==0, ]$shock_prev = -1
#MB_MF_dat[previous_pav_shock==0, ]$previous_pav_shock = -1
#MB_MF_dat$MB_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MB
#MB_MF_dat$MF_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MF
#clear screen
rm(list = ls())
#load packages (install if have not already)
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#read in data
task_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_trial_by_trial.csv")
#display data
head(task_dat)
summary(task_dat)
str(task_dat)
#code this as a factor
task_dat$subject_no = as.factor(task_dat$subject_no)
#figure out subjects that generally made the same action on 95% of trials
percent_left = task_dat[choice==1, .(N_left = .N), by = subject_no]
percent_left$N_total = task_dat[choice!="NaN", .N, by = subject_no][, N]
percent_left$percent_left = percent_left$N_left/percent_left$N_total
#exclude subs where 95% of choices are the same side
include_subs = percent_left[percent_left > 0.05 & percent_left < 0.95, subject_no]
task_dat = task_dat[subject_no %in% include_subs, ]
#add variable coding whether made objectively the correct response
task_dat$correct = (task_dat$prob_shock_CS_left_commontrans>task_dat$prob_shock_CS_right_commontrans & task_dat$choice==1) | (task_dat$prob_shock_CS_left_commontrans<task_dat$prob_shock_CS_right_commontrans & task_dat$choice==2)
task_dat$correct_binary = NaN
task_dat[correct==TRUE, ]$correct_binary = 1
task_dat[correct==FALSE, ]$correct_binary = -1
#set up data table to run basic MF MB regression
#extract relevant variables from main data frame
MB_MF_dat = task_dat[, .(trial_n, subject_no, transition, shock, choice, previous_action_repeated, correct_binary, choose_right_logistic, pav_MB, pav_MF, right_reinforced, previous_pav_shock, previous_pav_ntrials_back)]
#lagged transition variable
MB_MF_dat$transition_prev[1] = NaN
MB_MF_dat$transition_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$transition[1:nrow(MB_MF_dat)-1]
#lagged outcome variable
MB_MF_dat$shock_prev[1] = NaN
MB_MF_dat$shock_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$shock[1:nrow(MB_MF_dat)-1]
#lagged correct variable
MB_MF_dat$correct_binary_prev[1] = NaN
MB_MF_dat$correct_binary_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$correct_binary[1:nrow(MB_MF_dat)-1]
#lagged choice variable
MB_MF_dat$choice_prev[1] = NaN
MB_MF_dat$choice_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$choice[1:nrow(MB_MF_dat)-1]
#lagged right reinforced variable
MB_MF_dat$right_reinforced_prev[1] = NaN
MB_MF_dat$right_reinforced_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$right_reinforced[1:nrow(MB_MF_dat)-1]
#convert outcomes to -1(prevoiusly 0) and 1
MB_MF_dat[shock_prev==0, ]$shock_prev = -1
#MB_MF_dat[previous_pav_shock==0, ]$previous_pav_shock = -1
#MB_MF_dat$MB_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MB
#MB_MF_dat$MF_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MF
m7 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF*previous_pav_ntrials_back + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF*previous_pav_ntrials_back | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m7)
m8 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev| subject_no)', data = MB_MF_dat, family = "binomial")
summary(m8)
summary(m8)
m8 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev + correct_binary_prev + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev + correct_binary_prev| subject_no)', data = MB_MF_dat, family = "binomial")
summary(m8)
summary(m1)
m1 = glmer('previous_action_repeated ~ transition_prev*shock_prev + (1 + transition_prev*shock_prev  | subject_no)', data = MB_MF_dat, family = "binomial")
coef(m1)$subject_no
csv.write(coef(m1)$subject_no)
write.csv(coef(m1)$subject_no)
pwd
pwd()
getwd()
?write.csv(coef(m1)$subject_no)
write.csv(coef(m1)$subject_no, "test.csv")
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv.csv")
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
merge(summary_dat, coef(m1)$subject_no)
join(summary_dat, coef(m1)$subject_no)
?join
summary_dat
summary_dat$subject_no = summary_dat$subjects
merge(summary_dat, coef(m1)$subject_no)
coef(m1)$subject_no
data.table(coef(m1)$subject_no, unique(task_dat$subject_no))
data.table(coef(m1)$subject_no, subject_no = unique(task_dat$subject_no))
merge(summary_dat, coef(m1)$subject_no)
summary_dat
xx = data.table(coef(m1)$subject_no, subject_no = unique(task_dat$subject_no))
merge(summary_dat, xx)
summary(summart_dat)
summary(summary_dat)
summary(xx)
xx$subject_no = as.numeric(xx$subject_no)
merge(summary_dat, xx)
xx = merge(summary_dat, xx)
coef(xx)
cor(xx)
xx
cor(as.numeric(xx))
cor(xx)
summary(xx)
xx[, BIS_BAS_Fun:`transition_prev:shock_prev`]
cor(xx[, BIS_BAS_Fun:`transition_prev:shock_prev`])
xx$diff = xx$transition_prev:shock_prev - shock_prev
xx$diff = xx$transition_prev:shock_prev - xx$shock_prev
xx$diff = xx$transition_prev:shock_prev - xx$shock_prev
xx$diff = xx$transition_prev:shock_prev - xx$shock_prev
xx$diff = xx$`transition_prev:shock_prev`E - xx$shock_prev
xx$diff = xx$`transition_prev:shock_prev` - xx$shock_prev
cor(xx[, BIS_BAS_Fun:`transition_prev:shock_prev`])
xx
cor(xx[, BIS_BAS_Fun:diff])
m1
summary(m1)
qplot(xx$diff, xx$BDI)
qplot(xx$diff, scale(xx$BDI))
qplot(xx$diff, xx$BDI)
qplot(xx$diff, xx$BIS)
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
xx$diff = xx$`transition_prev:shock_prev` - xx$shock_prev
qplot(xx$diff, scale(xx$BDI))
cor(xx[, BIS_BAS_Fun:`transition_prev:shock_prev`])
xx
cor(xx[, BIS_BAS_Fun:`transition_prev:shock_prev`])
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
merge(summary_dat, xx)
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
xx
summary_dat
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
summary_dat$subject_no = xx$subjects
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
summary_dat$subject_no = as.numeric(xx$subjects)
merge(summary_dat, xx)
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
summary_dat$subject_no = as.numeric(summary_dat$subjects)
merge(summary_dat, xx)
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
str(summary_dat)
str(summary_dat)
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
xx
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
xx$subject_no = as.numeric(xx$subject_no)
merge(summary_dat, xx)
merge(summary_dat, xx, subject_no)
?merge
merge(summary_dat, xx, by = "subject_no")
summary_dat$subjects
summary_dat$subject_no
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
summary_dat$subject_no = as.numeric(summary_dat$subject_no)
merge(summary_dat, xx, by = "subject_no")
summary_dat
summary_dat$subject_no = as.numeric(summary_dat$subjects)
merge(summary_dat, xx, by = "subject_no")
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
summary_dat$subjects
summary_dat$subjects
xx$subjects
xx$subject_no = as.numeric(xx$subjects)
xx
merge(summary_dat, xx, by = "subject_no")
summary_dat$subject_no
summary_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_summary.csv")
summary(summary_dat)
xx = data.table(coef(m7)$subject_no, subject_no = unique(task_dat$subject_no))
xx
xx$subjects = as.numeric(xx$subject_no)
merge(summary_dat, xx, by = "subjects")
xx$diff = xx$right_reinforced_prev - xx$`right_reinforced_prev:transition_prev`
cor(xx[, BIS_BAS_Fun:diff])
cor(xx[, BIS_BAS_Fun])
cor(xx[, BIS_BAS_Fun:pav_MF])
cor(xx[, BIS_BAS_Fun:`transition_prev:shock_prev`])
xx
xx = merge(summary_dat, xx, by = "subjects")
xx$diff = xx$right_reinforced_prev - xx$`right_reinforced_prev:transition_prev`
cor(xx[, BIS_BAS_Fun:pav_MF])
xx
cor(xx[, BIS_BAS_Fun:diff])
cor(xx[, BIS_BAS_Fun:pav_MF])
xx
cor(xx[, BIS_BAS_Fun:`right_reinforced_prev:transition_prev`])
cor(xx[, BIS_BAS_Fun:diff])
cor(xx[, BIS_BAS_Fun:diff])
cor(xx[, BIS_BAS_Fun:as.numeric(diff)])
xx$diff
summary(xx$diff)
xx
xx$subject_no
xx$subject_no = as.numeric(xx$subject_no)
cor(xx[, BIS_BAS_Fun:diff])
(xx[, qplot(BIS_BAS_Fun:diff)])
cor(xx[, BIS_BAS_Fun:diff])
qplot(xx$BIS_BAS_Fun, scale(xx$pav_MB))
qplot(xx$BIS_BAS_Fun, scale(xx$pav_MB))
qplot(xx$BIS, scale(xx$pav_MF))
#clear screen
rm(list = ls())
#load packages (install if have not already)
library(data.table)
library(lme4)
library(lmerTest)
library(ggplot2)
#read in data
task_dat = fread("/Users/neil/GitHubRepo/Projects/Aversive2Step/data/processed/data_trial_by_trial.csv")
#display data
head(task_dat)
summary(task_dat)
str(task_dat)
#code this as a factor
task_dat$subject_no = as.factor(task_dat$subject_no)
#figure out subjects that generally made the same action on 95% of trials
percent_left = task_dat[choice==1, .(N_left = .N), by = subject_no]
percent_left$N_total = task_dat[choice!="NaN", .N, by = subject_no][, N]
percent_left$percent_left = percent_left$N_left/percent_left$N_total
#exclude subs where 95% of choices are the same side
include_subs = percent_left[percent_left > 0.05 & percent_left < 0.95, subject_no]
task_dat = task_dat[subject_no %in% include_subs, ]
#add variable coding whether made objectively the correct response
task_dat$correct = (task_dat$prob_shock_CS_left_commontrans>task_dat$prob_shock_CS_right_commontrans & task_dat$choice==1) | (task_dat$prob_shock_CS_left_commontrans<task_dat$prob_shock_CS_right_commontrans & task_dat$choice==2)
task_dat$correct_binary = NaN
task_dat[correct==TRUE, ]$correct_binary = 1
task_dat[correct==FALSE, ]$correct_binary = -1
#set up data table to run basic MF MB regression
#extract relevant variables from main data frame
MB_MF_dat = task_dat[, .(trial_n, subject_no, transition, shock, choice, previous_action_repeated, correct_binary, choose_right_logistic, pav_MB, pav_MF, right_reinforced, previous_pav_shock, previous_pav_ntrials_back)]
#lagged transition variable
MB_MF_dat$transition_prev[1] = NaN
MB_MF_dat$transition_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$transition[1:nrow(MB_MF_dat)-1]
#lagged outcome variable
MB_MF_dat$shock_prev[1] = NaN
MB_MF_dat$shock_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$shock[1:nrow(MB_MF_dat)-1]
#lagged correct variable
MB_MF_dat$correct_binary_prev[1] = NaN
MB_MF_dat$correct_binary_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$correct_binary[1:nrow(MB_MF_dat)-1]
#lagged choice variable
MB_MF_dat$choice_prev[1] = NaN
MB_MF_dat$choice_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$choice[1:nrow(MB_MF_dat)-1]
#lagged right reinforced variable
MB_MF_dat$right_reinforced_prev[1] = NaN
MB_MF_dat$right_reinforced_prev[2:nrow(MB_MF_dat)] = MB_MF_dat$right_reinforced[1:nrow(MB_MF_dat)-1]
#convert outcomes to -1(prevoiusly 0) and 1
MB_MF_dat[shock_prev==0, ]$shock_prev = -1
#MB_MF_dat[previous_pav_shock==0, ]$previous_pav_shock = -1
#MB_MF_dat$MB_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MB
#MB_MF_dat$MF_pav = MB_MF_dat$previous_pav_shock*MB_MF_dat$previous_pav_congruent_MF
#run basic model
m1 = glmer('previous_action_repeated ~ transition_prev*shock_prev + (1 + transition_prev*shock_prev  | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m1)
m5 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + (1 + right_reinforced_prev*transition_prev | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m5)
m6 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + choice_prev + (1 + right_reinforced_prev*transition_prev + choice_prev| subject_no)', data = MB_MF_dat, family = "binomial")
m6 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + choice_prev + (1 + right_reinforced_prev*transition_prev + choice_prev| subject_no)', data = MB_MF_dat, family = "binomial")
summary(m6)
0.74/0.23
m7 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m7)
m8 = glmer('choose_right_logistic ~ right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev + (1 + right_reinforced_prev*transition_prev + pav_MB + pav_MF + choice_prev | subject_no)', data = MB_MF_dat, family = "binomial")
summary(m8)
summary(m7)
m5
summary(m5)
summary(m6)
summary(m7)
summary(m4)
summary(m5)
summary(m7)
summary(m8)
xx = data.table(coef(m5)$subject_no, subject_no = unique(task_dat$subject_no))
xx
write.csv(xx, 'xx.csv')
m1
xx2 = data.table(coef(m6)$subject_no, subject_no = unique(task_dat$subject_no))
write.csv(xx2, 'xx2.csv')
xx3 = data.table(coef(m2)$subject_no, subject_no = unique(task_dat$subject_no))
xx3 = data.table(coef(m2)$subject_no, subject_no = unique(task_dat$subject_no))
m2 = glmer('previous_action_repeated ~ transition_prev*shock_prev + choice_prev + (1 + transition_prev*shock_prev + choice_prev| subject_no)', data = MB_MF_dat, family = "binomial")
xx3 = data.table(coef(m2)$subject_no, subject_no = unique(task_dat$subject_no))
write.csv(xx3, 'xx3.csv')
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
library(lmerTest)
library(data.table)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
#
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
dat$approach_avoid = as.factor(dat$approach_avoid)
levels(dat$approach_avoid) = c("accept", "reject")
#looks at how rts vary with option and block. interaction?
mean_rts = dat[, .(mean_rtz = mean(rt_z)), by=c("subj", "stim_rank", "block", "approach_avoid", "order_condition")]
#now compute means for each option and block
mean_rts[order(block,stim_rank), mean(mean_rtz), by = .(block, stim_rank)]
#break down into accept/reject
mean_rts[order(block,stim_rank,approach_avoid), mean(mean_rtz), by = .(block, stim_rank, approach_avoid)]
ggplot(dat = mean_rts[order(block,stim_rank,approach_avoid), .(mean_rtz = mean(mean_rtz)), by = .(block, stim_rank, approach_avoid)],
aes(x=stim_rank, y=mean_rtz, fill=approach_avoid)) + geom_bar(stat="identity", position ="dodge") +
ggtitle('both blocks combined') +
coord_cartesian(ylim=c(-1,1))
library(ggplot2)
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
library(lmerTest)
library(data.table)
library(ggplot2)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
#
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
dat$approach_avoid = as.factor(dat$approach_avoid)
levels(dat$approach_avoid) = c("accept", "reject")
#looks at how rts vary with option and block. interaction?
mean_rts = dat[, .(mean_rtz = mean(rt_z)), by=c("subj", "stim_rank", "block", "approach_avoid", "order_condition")]
#now compute means for each option and block
mean_rts[order(block,stim_rank), mean(mean_rtz), by = .(block, stim_rank)]
#break down into accept/reject
mean_rts[order(block,stim_rank,approach_avoid), mean(mean_rtz), by = .(block, stim_rank, approach_avoid)]
ggplot(dat = mean_rts[order(block,stim_rank,approach_avoid), .(mean_rtz = mean(mean_rtz)), by = .(block, stim_rank, approach_avoid)],
aes(x=stim_rank, y=mean_rtz, fill=approach_avoid)) + geom_bar(stat="identity", position ="dodge") +
ggtitle('both blocks combined') +
coord_cartesian(ylim=c(-1,1))
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
library(lmerTest)
library(data.table)
library(ggplot2)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_subjective1beta2lr_delayreward/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
#
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
dat$approach_avoid = as.factor(dat$approach_avoid)
levels(dat$approach_avoid) = c("accept", "reject")
# Clear workspace
rm(list = ls())
#load in lme4 library
library(lme4)
#and lmerTest
library(lmerTest)
library(data.table)
library(ggplot2)
model_folder = c("v103")
setwd(paste("~/GitHubRepo/Projects/PreySelection/", model_folder, "/models/model_asymmetry/", sep =""))
#load in data
dat = fread(paste("data_for_lme4.csv", sep =""))
#
dat_summary_stats = fread(paste("summary_stats2.csv", sep =""))
dat$approach_avoid = as.factor(dat$approach_avoid)
levels(dat$approach_avoid) = c("accept", "reject")
#looks at how rts vary with option and block. interaction?
mean_rts = dat[, .(mean_rtz = mean(rt_z)), by=c("subj", "stim_rank", "block", "approach_avoid", "order_condition")]
#now compute means for each option and block
mean_rts[order(block,stim_rank), mean(mean_rtz), by = .(block, stim_rank)]
#break down into accept/reject
mean_rts[order(block,stim_rank,approach_avoid), mean(mean_rtz), by = .(block, stim_rank, approach_avoid)]
ggplot(dat = mean_rts[order(block,stim_rank,approach_avoid), .(mean_rtz = mean(mean_rtz)), by = .(block, stim_rank, approach_avoid)],
aes(x=stim_rank, y=mean_rtz, fill=approach_avoid)) + geom_bar(stat="identity", position ="dodge") +
ggtitle('both blocks combined') +
coord_cartesian(ylim=c(-1,1))
View(dat)
mean_rts
dat$rt_z
corr(dat$rt_z, dat$trial_index_actual)
cor(dat$rt_z, dat$trial_index_actual)
dat[, cor(rt_z, trial_index_actual), by=sub)
dat[, cor(rt_z, trial_index_actual), by=sub)]
dat[, .(cor(rt_z, trial_index_actual)), by=sub)]
dat[, cor(rt_z, trial_index_actual), by=sub]
dat[, cor(rt_z, trial_index_actual), by=sub]
dat[, .(cor(rt_z, trial_index_actual)), by=sub]
dat[, cor(rt_z, trial_index_actual), by=sub]
dat[, mean(rt_z), by=.(sub, stim_rank_factor_1back)]
dat[, mean(rt_z), by=(sub, stim_rank_factor_1back)]
dat[, mean(rt_z), by=.(sub, stim_rank_factor_1back)]
dat[, mean(rt_z), by=.(sub)]
dat[, mean(rt_z), by=sub]
dat[, mean(rt_z),]
str(dat)
dat[, mean(rt_z), by=.(subj, stim_rank_factor_1back)]
dat[, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
View(dat)
dat[block==1, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==-1, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==1 & choice_log_reg_1back, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==1 & choice_log_reg_1back==1, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==1 & choice_log_reg_1back==0, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==-1 & choice_log_reg_1back==1, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[block==-1 & choice_log_reg_1back==0, mean(rt_z), by=.(subj, stim_rank_factor_1back)][, mean(V1), by = stim_rank_factor_1back]
dat[, cor(rt_z, trial_index_actual), by=subj]
dat[, cor(rt_z, trial_index_actual), by=subj][, mean(V1)]
dat[order_condition==1, mean(rt_z), by=.(subj)]
dat[order_condition==1, mean(rt_z), by=.(subj)][mean(V1)]
dat[order_condition==1, mean(rt_z), by=.(subj)][, mean(V1)]
dat[order_condition==1, mean(rt_z), by=.(subj)][, mean(V1)]
dat[order_condition==-1, mean(rt_z), by=.(subj)][, mean(V1)]
dat[order_condition==-1 & block==1, mean(rt_z), by=.(subj)][, mean(V1)]
dat[order_condition==1 & block==1, mean(rt_z), by=.(subj)][, mean(V1)]
