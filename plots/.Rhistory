library(plyr)
exp = 1 #change this according to which plot you want to do
#load in data
if (exp==1){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v103/data/acceptance_rates_103.csv")
} else if (exp ==2){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/data/acceptance_rates_104.csv")
}
#code order_condition as factor
dat$order_condition = as.factor(dat$order_condition)
#label these
levels(dat$order_condition) <- c("richpoor", "poorrich")
dat = dat[order_condition=="poorrich", ]
#split these up into two data frames - one for each block - only extracting the relevant fields
data_A = dat[, .(percent_accept_A1, percent_accept_A2, percent_accept_A3, percent_accept_A2_A3, percent_accept_A4, order_condition)]
data_B = dat[, .(percent_accept_B1, percent_accept_B2, percent_accept_B3,  percent_accept_B2_B3, percent_accept_B4, order_condition)]
#for block A,
#convert to long format for plotting so have all acceptance rates in one column
#and a second column indicating which options this applies to
data_A = melt(data_A, measure.vars = c("percent_accept_A1", "percent_accept_A2", "percent_accept_A3", "percent_accept_A4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
#code the options as factors
data_A$rank = as.factor(data_A$rank)
#rename them to best, intermediate, worst
data_A$rank = revalue(data_A$rank, c("percent_accept_A1"="HRLD", "percent_accept_A2"="LRLD", "percent_accept_A3"="HRHD", "percent_accept_A4"="LRHD"))
data_A$block = as.factor(c(rep("rich",nrow(data_A))))
#now do the same for block B
data_B = melt(data_B, measure.vars = c("percent_accept_B1", "percent_accept_B2", "percent_accept_B3", "percent_accept_B4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
data_B$rank = as.factor(data_B$rank)
#rename them to best, intermediate, worst
data_B$rank = revalue(data_B$rank, c("percent_accept_B1"="HRLD", "percent_accept_B2"="LRLD", "percent_accept_B3"="HRHD", "percent_accept_B4"="LRHD"))
data_B$block = as.factor(c(rep("poor",nrow(data_B))))
data_individual = merge(data_A, data_B, all=TRUE)
#now calculate the summary stats - means and sem - for each option for each block
#note that for the initial variable (as this table hasn't been created yet),
#you have to do a long winded code to get the varaible name
data_summaryallA = data_A[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallA$sem = data_A[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallA$block = as.factor(c(rep("rich",nrow(data_summaryallA))))
data_summaryallA$order_condition = as.factor(c(rep("all",nrow(data_summaryallA))))
data_summaryallB = data_B[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallB$sem = data_B[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallB$block = as.factor(c(rep("poor", nrow(data_summaryallB))))
data_summaryallB$order_condition = as.factor(c(rep("all",nrow(data_summaryallB))))
#combine the summary stats into one
data_summary = merge(data_summaryallA, data_summaryallB, all=TRUE)
#order by block then by rank
setkey(data_summary, block, rank)
#get rid of various data frames to tidy up
rm("data_summaryallA", "data_summaryallB")
if (exp==1){
title_text = "RichPoor Participants: Experiment 1"
} else if (exp==2){
title_text = "RichPoor Participants: Experiment 2"
}
#plot
p1 <- ggplot(data = data_summary, aes(x = rank, y = acceptance_rates, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = acceptance_rates-sem, ymax = acceptance_rates+sem), position = position_dodge(width = .5), width=0.25) +
geom_point(data = data_individual, aes(x = rank, y = percent_accept, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_color_manual(values = c('rich' = 'blue', 'poor' = 'red'))+
ylab("accept %") +
xlab("option") +
theme_cowplot()+
theme(legend.position="none")+
#ggtitle(title_text)+
scale_fill_brewer(palette="Set1", direction=-1)+
scale_y_continuous(limits = c(0, 1))+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 10, face = "bold"))
p1
data_summary
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
exp = 2 #change this according to which plot you want to do
#load in data
if (exp==1){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v103/data/acceptance_rates_103.csv")
} else if (exp ==2){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/data/acceptance_rates_104.csv")
}
#code order_condition as factor
dat$order_condition = as.factor(dat$order_condition)
#label these
levels(dat$order_condition) <- c("richpoor", "poorrich")
dat = dat[order_condition=="poorrich", ]
#split these up into two data frames - one for each block - only extracting the relevant fields
data_A = dat[, .(percent_accept_A1, percent_accept_A2, percent_accept_A3, percent_accept_A2_A3, percent_accept_A4, order_condition)]
data_B = dat[, .(percent_accept_B1, percent_accept_B2, percent_accept_B3,  percent_accept_B2_B3, percent_accept_B4, order_condition)]
#for block A,
#convert to long format for plotting so have all acceptance rates in one column
#and a second column indicating which options this applies to
data_A = melt(data_A, measure.vars = c("percent_accept_A1", "percent_accept_A2", "percent_accept_A3", "percent_accept_A4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
#code the options as factors
data_A$rank = as.factor(data_A$rank)
#rename them to best, intermediate, worst
data_A$rank = revalue(data_A$rank, c("percent_accept_A1"="HRLD", "percent_accept_A2"="LRLD", "percent_accept_A3"="HRHD", "percent_accept_A4"="LRHD"))
data_A$block = as.factor(c(rep("rich",nrow(data_A))))
#now do the same for block B
data_B = melt(data_B, measure.vars = c("percent_accept_B1", "percent_accept_B2", "percent_accept_B3", "percent_accept_B4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
data_B$rank = as.factor(data_B$rank)
#rename them to best, intermediate, worst
data_B$rank = revalue(data_B$rank, c("percent_accept_B1"="HRLD", "percent_accept_B2"="LRLD", "percent_accept_B3"="HRHD", "percent_accept_B4"="LRHD"))
data_B$block = as.factor(c(rep("poor",nrow(data_B))))
data_individual = merge(data_A, data_B, all=TRUE)
#now calculate the summary stats - means and sem - for each option for each block
#note that for the initial variable (as this table hasn't been created yet),
#you have to do a long winded code to get the varaible name
data_summaryallA = data_A[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallA$sem = data_A[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallA$block = as.factor(c(rep("rich",nrow(data_summaryallA))))
data_summaryallA$order_condition = as.factor(c(rep("all",nrow(data_summaryallA))))
data_summaryallB = data_B[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallB$sem = data_B[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallB$block = as.factor(c(rep("poor", nrow(data_summaryallB))))
data_summaryallB$order_condition = as.factor(c(rep("all",nrow(data_summaryallB))))
#combine the summary stats into one
data_summary = merge(data_summaryallA, data_summaryallB, all=TRUE)
#order by block then by rank
setkey(data_summary, block, rank)
#get rid of various data frames to tidy up
rm("data_summaryallA", "data_summaryallB")
if (exp==1){
title_text = "RichPoor Participants: Experiment 1"
} else if (exp==2){
title_text = "RichPoor Participants: Experiment 2"
}
#plot
p1 <- ggplot(data = data_summary, aes(x = rank, y = acceptance_rates, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = acceptance_rates-sem, ymax = acceptance_rates+sem), position = position_dodge(width = .5), width=0.25) +
geom_point(data = data_individual, aes(x = rank, y = percent_accept, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_color_manual(values = c('rich' = 'blue', 'poor' = 'red'))+
ylab("accept %") +
xlab("option") +
theme_cowplot()+
theme(legend.position="none")+
#ggtitle(title_text)+
scale_fill_brewer(palette="Set1", direction=-1)+
scale_y_continuous(limits = c(0, 1))+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 10, face = "bold"))
p1
data_summary
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
exp = 1 #change this according to which plot you want to do
#load in data
if (exp==1){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v103/data/acceptance_rates_103.csv")
} else if (exp ==2){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/data/acceptance_rates_104.csv")
}
#code order_condition as factor
dat$order_condition = as.factor(dat$order_condition)
#label these
levels(dat$order_condition) <- c("richpoor", "poorrich")
dat = dat[order_condition=="richpoor", ]
#split these up into two data frames - one for each block - only extracting the relevant fields
data_A = dat[, .(percent_accept_A1, percent_accept_A2, percent_accept_A3, percent_accept_A2_A3, percent_accept_A4, order_condition)]
data_B = dat[, .(percent_accept_B1, percent_accept_B2, percent_accept_B3,  percent_accept_B2_B3, percent_accept_B4, order_condition)]
#for block A,
#convert to long format for plotting so have all acceptance rates in one column
#and a second column indicating which options this applies to
data_A = melt(data_A, measure.vars = c("percent_accept_A1", "percent_accept_A2", "percent_accept_A3", "percent_accept_A4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
#code the options as factors
data_A$rank = as.factor(data_A$rank)
#rename them to best, intermediate, worst
data_A$rank = revalue(data_A$rank, c("percent_accept_A1"="HRLD", "percent_accept_A2"="LRLD", "percent_accept_A3"="HRHD", "percent_accept_A4"="LRHD"))
data_A$block = as.factor(c(rep("rich",nrow(data_A))))
#now do the same for block B
data_B = melt(data_B, measure.vars = c("percent_accept_B1", "percent_accept_B2", "percent_accept_B3", "percent_accept_B4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
data_B$rank = as.factor(data_B$rank)
#rename them to best, intermediate, worst
data_B$rank = revalue(data_B$rank, c("percent_accept_B1"="HRLD", "percent_accept_B2"="LRLD", "percent_accept_B3"="HRHD", "percent_accept_B4"="LRHD"))
data_B$block = as.factor(c(rep("poor",nrow(data_B))))
data_individual = merge(data_A, data_B, all=TRUE)
#now calculate the summary stats - means and sem - for each option for each block
#note that for the initial variable (as this table hasn't been created yet),
#you have to do a long winded code to get the varaible name
data_summaryallA = data_A[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallA$sem = data_A[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallA$block = as.factor(c(rep("rich",nrow(data_summaryallA))))
data_summaryallA$order_condition = as.factor(c(rep("all",nrow(data_summaryallA))))
data_summaryallB = data_B[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallB$sem = data_B[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallB$block = as.factor(c(rep("poor", nrow(data_summaryallB))))
data_summaryallB$order_condition = as.factor(c(rep("all",nrow(data_summaryallB))))
#combine the summary stats into one
data_summary = merge(data_summaryallA, data_summaryallB, all=TRUE)
#order by block then by rank
setkey(data_summary, block, rank)
#get rid of various data frames to tidy up
rm("data_summaryallA", "data_summaryallB")
if (exp==1){
title_text = "RichPoor Participants: Experiment 1"
} else if (exp==2){
title_text = "RichPoor Participants: Experiment 2"
}
#plot
p1 <- ggplot(data = data_summary, aes(x = rank, y = acceptance_rates, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = acceptance_rates-sem, ymax = acceptance_rates+sem), position = position_dodge(width = .5), width=0.25) +
geom_point(data = data_individual, aes(x = rank, y = percent_accept, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_color_manual(values = c('rich' = 'blue', 'poor' = 'red'))+
ylab("accept %") +
xlab("option") +
theme_cowplot()+
theme(legend.position="none")+
#ggtitle(title_text)+
scale_fill_brewer(palette="Set1", direction=-1)+
scale_y_continuous(limits = c(0, 1))+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 10, face = "bold"))
p1
data_summary
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
exp = 2 #change this according to which plot you want to do
#load in data
if (exp==1){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v103/data/acceptance_rates_103.csv")
} else if (exp ==2){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/data/acceptance_rates_104.csv")
}
#code order_condition as factor
dat$order_condition = as.factor(dat$order_condition)
#label these
levels(dat$order_condition) <- c("richpoor", "poorrich")
dat = dat[order_condition=="richpoor", ]
#split these up into two data frames - one for each block - only extracting the relevant fields
data_A = dat[, .(percent_accept_A1, percent_accept_A2, percent_accept_A3, percent_accept_A2_A3, percent_accept_A4, order_condition)]
data_B = dat[, .(percent_accept_B1, percent_accept_B2, percent_accept_B3,  percent_accept_B2_B3, percent_accept_B4, order_condition)]
#for block A,
#convert to long format for plotting so have all acceptance rates in one column
#and a second column indicating which options this applies to
data_A = melt(data_A, measure.vars = c("percent_accept_A1", "percent_accept_A2", "percent_accept_A3", "percent_accept_A4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
#code the options as factors
data_A$rank = as.factor(data_A$rank)
#rename them to best, intermediate, worst
data_A$rank = revalue(data_A$rank, c("percent_accept_A1"="HRLD", "percent_accept_A2"="LRLD", "percent_accept_A3"="HRHD", "percent_accept_A4"="LRHD"))
data_A$block = as.factor(c(rep("rich",nrow(data_A))))
#now do the same for block B
data_B = melt(data_B, measure.vars = c("percent_accept_B1", "percent_accept_B2", "percent_accept_B3", "percent_accept_B4"),
variable.name = c("rank"),
value.name = c("percent_accept"))
data_B$rank = as.factor(data_B$rank)
#rename them to best, intermediate, worst
data_B$rank = revalue(data_B$rank, c("percent_accept_B1"="HRLD", "percent_accept_B2"="LRLD", "percent_accept_B3"="HRHD", "percent_accept_B4"="LRHD"))
data_B$block = as.factor(c(rep("poor",nrow(data_B))))
data_individual = merge(data_A, data_B, all=TRUE)
#now calculate the summary stats - means and sem - for each option for each block
#note that for the initial variable (as this table hasn't been created yet),
#you have to do a long winded code to get the varaible name
data_summaryallA = data_A[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallA$sem = data_A[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallA$block = as.factor(c(rep("rich",nrow(data_summaryallA))))
data_summaryallA$order_condition = as.factor(c(rep("all",nrow(data_summaryallA))))
data_summaryallB = data_B[, .(mean(percent_accept)), by=c("rank")][,c("acceptance_rates"):=.(V1)][,c("V1"):=NULL]
data_summaryallB$sem = data_B[, .(sd(percent_accept)/sqrt(.N)), by=c("rank")][,V1]
data_summaryallB$block = as.factor(c(rep("poor", nrow(data_summaryallB))))
data_summaryallB$order_condition = as.factor(c(rep("all",nrow(data_summaryallB))))
#combine the summary stats into one
data_summary = merge(data_summaryallA, data_summaryallB, all=TRUE)
#order by block then by rank
setkey(data_summary, block, rank)
#get rid of various data frames to tidy up
rm("data_summaryallA", "data_summaryallB")
if (exp==1){
title_text = "RichPoor Participants: Experiment 1"
} else if (exp==2){
title_text = "RichPoor Participants: Experiment 2"
}
#plot
p1 <- ggplot(data = data_summary, aes(x = rank, y = acceptance_rates, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = acceptance_rates-sem, ymax = acceptance_rates+sem), position = position_dodge(width = .5), width=0.25) +
geom_point(data = data_individual, aes(x = rank, y = percent_accept, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_color_manual(values = c('rich' = 'blue', 'poor' = 'red'))+
ylab("accept %") +
xlab("option") +
theme_cowplot()+
theme(legend.position="none")+
#ggtitle(title_text)+
scale_fill_brewer(palette="Set1", direction=-1)+
scale_y_continuous(limits = c(0, 1))+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 10, face = "bold"))
p1
data_summary
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
#load in data
#block=0=rich
#block=1=poor
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/models/model_asymmetric/reward_rate_extract.csv")
dat$block = as.factor(dat$block)
dat[block==0, ]$block = "rich"
dat[block==1, ]$block = "poor"
dat$order_condition = as.factor(NA)
subs = unique(dat$sub)
for (i in 1:length(subs)){
dat_tmp = dat[sub == subs[i], ]
if (dat_tmp[1, block]=="rich"){
dat[sub == subs[i], order_condition := "richpoor"]
} else if (dat_tmp[1, block]=="poor"){
dat[sub == subs[i], order_condition := "poorrich"]
}
}
#calculate means for condition and environment
data_individual = dat[, mean(reward_rate), by = .(block, order_condition, sub)]
data_summary = data_individual[, .(means = mean(V1), sem = sd(V1)/sqrt(.N)), by=.(order_condition, block)]
#reorder factors
data_individual$block = relevel(data_summary$block, "rich")
data_individual$order_condition = relevel(data_summary$order_condition, "richpoor")
data_summary$block = relevel(data_summary$block, "rich")
data_summary$order_condition = relevel(data_summary$order_condition, "richpoor")
#plot
p1 <- ggplot(data = data_summary, aes(x = order_condition, y = means, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = means-sem, ymax = means+sem), position = position_dodge(width = .5), width=0.25)+
#geom_point(data = data_individual, aes(x = order_condition, y = V1, fill=block), alpha = 0.2, size = 3, position = position_dodge(width=0.5)) +
geom_point(data = data_individual, aes(x = order_condition, y = V1, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 60))+
ylab("Reward Rate Estimate \n (Asymmetric Model)") +
xlab("order condition") +
theme_cowplot()+
theme(legend.position="none")+
ggtitle("reward rate estimate \n (time of choice)")+
scale_fill_brewer(palette="Set1", direction=-1)+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 15, face = "bold"))
p1
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
#load in data
#block=0=rich
#block=1=poor
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/models/model_asymmetric/reward_rate_extract.csv")
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
#load in data
#block=0=rich
#block=1=poor
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/models/model_asymmetric/reward_rate_extract.csv")
dat$block = as.factor(dat$block)
dat[block==0, ]$block = "rich"
dat[block==1, ]$block = "poor"
dat$order_condition = as.factor(NA)
subs = unique(dat$sub)
for (i in 1:length(subs)){
dat_tmp = dat[sub == subs[i], ]
if (dat_tmp[1, block]=="rich"){
dat[sub == subs[i], order_condition := "richpoor"]
} else if (dat_tmp[1, block]=="poor"){
dat[sub == subs[i], order_condition := "poorrich"]
}
}
#calculate means for condition and environment
data_individual = dat[, mean(reward_rate), by = .(block, order_condition, sub)]
data_summary = data_individual[, .(means = mean(V1), sem = sd(V1)/sqrt(.N)), by=.(order_condition, block)]
#reorder factors
data_individual$block = relevel(data_summary$block, "rich")
data_individual$order_condition = relevel(data_summary$order_condition, "richpoor")
data_summary$block = relevel(data_summary$block, "rich")
data_summary$order_condition = relevel(data_summary$order_condition, "richpoor")
#plot
p1 <- ggplot(data = data_summary, aes(x = order_condition, y = means, fill=block)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = means-sem, ymax = means+sem), position = position_dodge(width = .5), width=0.25)+
#geom_point(data = data_individual, aes(x = order_condition, y = V1, fill=block), alpha = 0.2, size = 3, position = position_dodge(width=0.5)) +
geom_point(data = data_individual, aes(x = order_condition, y = V1, colour = block), stroke = 1, colour = "black", alpha = 0.2, size = 1.5, pch=21, position = position_jitterdodge(dodge.width=0.5)) +
scale_y_continuous(expand = c(0,0), limits = c(0, 60))+
ylab("Reward Rate Estimate \n (Asymmetric Model)") +
xlab("order condition") +
theme_cowplot()+
theme(legend.position="none")+
ggtitle("reward rate estimate \n (time of choice)")+
scale_fill_brewer(palette="Set1", direction=-1)+
theme(axis.text=element_text(size=15), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 15, face = "bold"))
p1
data_summary
#this code to plot out acceptance rates
#N.Garrett, sept 2018
#Clear workspace
rm(list = ls())
#Get rid of exisiting plots
dev.off()
#Load packages - may need to install if not already
library(ggplot2)
library(data.table)
library(cowplot)
library(Hmisc)
library(plyr)
exp = 1 #change this according to which plot you want to do
#load in data
if (exp==1){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v103/data/acceptance_rates_103.csv")
#dat_sims_symmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.1085, 0.1131), sem = c(7.58E-04, 7.60E-04))
#dat_sims_asymmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.1817, 0.0359), sem = c(7.37E-04, 8.11E-04))
dat_sims_symmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.07, 0.05), sem = c(7.58E-04, 7.60E-04))
dat_sims_asymmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.13, 0.02), sem = c(7.37E-04, 8.11E-04))
} else if (exp ==2){
dat = fread("/Users/neil/GitHubRepo/Projects/PreySelection/v104/data/acceptance_rates_104.csv")
dat_sims_symmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.1154, 0.118), sem = c(7.85E-04, 7.64E-04))
dat_sims_asymmetric = data.table(order_condition = as.factor(c("poorrich", "richpoor")), means = c(0.1841, 0.011), sem = c(6.91E-04, 7.59E-04))
}
#code order_condition as factor
dat$order_condition = as.factor(dat$order_condition)
#label these
levels(dat$order_condition) <- c("richpoor", "poorrich")
dat$acceptance_change = (dat$percent_accept_B1_min_A1+dat$percent_accept_B2_min_A2+dat$percent_accept_B3_min_A3+dat$percent_accept_B4_min_A4)/4
dat[order_condition=="richpoor", mean(acceptance_change)]
dat[order_condition=="poorrich", mean(acceptance_change)]
#combine the summary stats into one
data_summary = dat[, .(means = mean(acceptance_change), sem = sd(acceptance_change)/.N), by=order_condition]
if (exp==1){
title_text = "Order Effect: Experiment 1"
min_y = -0.2
max_y = 0.4
} else if (exp==2){
title_text = "Order Effect: Experiment 2"
min_y = -0.3
max_y = 0.6
}
col_palette = c("#D4EFDF", "#D6EAF8")
#plot
p1 <- ggplot(data = data_summary, aes(x = order_condition, y = means)) +
geom_bar(stat = "identity", width = .5, position="dodge") +
geom_errorbar(data = data_summary, aes(ymin = means-sem, ymax = means+sem), position = position_dodge(width = .5), width=0.25) +
geom_jitter(data = dat, aes(x = order_condition, y = acceptance_change), alpha = 0.5, size = 1, width=0.075) +
#ylab("Change in acceptance rates \n (Poor - Rich ") +
ylab("") +
#xlab("Order Condition")+
xlab("")+
theme_cowplot()+
theme(legend.position="none")+
#ggtitle(title_text)+
ylim(min_y, max_y)+
scale_fill_brewer(palette="Set1", direction=-1)+
theme(axis.text=element_text(size=20), axis.title=element_text(size=15, face="bold"), plot.title = element_text(size = 10, face = "bold"))+
geom_point(data=dat_sims_symmetric[, .(order_condition, means)], colour="#D4EFDF", shape = "square", size = 5, alpha = 0.85, position = "identity")+
geom_point(data=dat_sims_asymmetric[, .(order_condition, means)], colour="#D6EAF8", shape = "triangle", size = 5, alpha = 0.85, position = "identity")
#geom_errorbar(data = dat_sims_symmetric, aes(ymin = means-sem, ymax = means+sem), position = position_dodge(width = .05), width=0.05)+
#geom_errorbar(data = dat_sims_asymmetric, aes(ymin = means-sem, ymax = means+sem), position = position_dodge(width = .05), width=0.05)
p1
